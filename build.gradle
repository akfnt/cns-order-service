plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.4'
	id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.akfnt'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '21'
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2023.0.1")
	set('testcontainersVersion', "1.19.3")
}

// 프로젝트를 빌드할때 그래들이 설정 프로세서를 사용하도록 설정
configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	implementation 'org.springframework.retry:spring-retry'
	implementation 'org.springframework.cloud:spring-cloud-stream-binder-rabbit'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
	runtimeOnly 'org.postgresql:postgresql'
	runtimeOnly 'org.postgresql:r2dbc-postgresql'
	// 마이그레이션을 통해 DB 버전 관리할 수 있는 기능 제공
	runtimeOnly 'org.flywaydb:flyway-core'
	// 플라이웨이가 아직 R2DBC를 지원하지 않기 때문에 DB와의 통신을 위해 JDBC 드라이버를 사용하기 위한 설정
	runtimeOnly 'org.postgresql:postgresql'				// 애플리케이션이 PostgreSQL DB에 연결할 수 있게 해주는 JDBC 드라이버
	runtimeOnly 'org.springframework:spring-jdbc'		// JDBC API 와 스프링의 통합을 제공한다. 스프링 프레임워크의 일부로 스프링 데이터 JDBC 와 혼동하지 말아햐 한다

	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:postgresql'
	testImplementation 'org.testcontainers:r2dbc'
	testImplementation 'com.squareup.okhttp3:mockwebserver'
	testImplementation 'org.springframework.cloud:spring-cloud-stream-test-binder'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

// 애플리케이션을 컨테이너화 하기 위한 설정
// 빌드팩을 사용해 OCI 이미지를 빌드하기 위한 스프링 부트 플러그인 작업
// 컨테이너 이미지를 빌드하고 깃허브 저장소에 업로드: ./gradlew bootBuildImage --imageName ghcr.io/akfnt/cns-order-service --publishImage -PregistryUrl="ghcr.io" -PregistryUsername=akfnt -PregistryToken=
bootBuildImage {
	// 빌드할 OCI 이미지의 이름. 이 이름은 그래들의 프로젝트 설정에서 정의한 이름과 같다.
	// 버전 번호를 사용하지 않고 '암묵적인 latest 태그'(prod 환경에서는 권장하지 않음)를 사용한다.
	imageName = "${project.name}"
	// 이미지에 설치할 JVM 버전. 자바 21을 사용한다.
	environment = ["BP_JVM_VERSION" : "21.*"]

	// 컨테이너 저장소 연결을 설정하기 위한 섹션
	docker {
		// 컨테이너 저장소 인증을 설정하기 위한 섹션. 값은 그래들 속성을 통해 전달된다.
		publishRegistry {
			username = project.findProperty("registryUsername")
			password = project.findProperty("registryToken")
			url = project.findProperty("registryUrl")
		}
	}
}