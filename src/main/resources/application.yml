server:
  port: 9002
  shutdown: graceful                    # 우아한 종료를 위한 활성화
  netty:
    connection-timeout: 2s              # 서버와 TCP 연결을 수립하기 위해 기다리는 시간
    idle-timeout: 15s                   # 데이터가 전송되지 않는 경우 TCP 연결을 닫기 전에 기다리는 시간

spring:
  application:
    name: cns-order-service
  config:
    import: "optional:configserver:"
  lifecycle:
    timeout-per-shutdown-phase: 15s     # 15초간의 우아한 종료기간을 둔다
  r2dbc:
    username: user
    password: password
    url: r2dbc:postgresql://localhost:5432/polardb_order
    pool:
      max-create-connection-time: 2s    # 풀에서 연결 객체 하나를 얻을 때까지 기다릴 수 있는 최대한의 시간
      initial-size: 5
      max-size: 10
  flyway:                               # 플라이웨이가 아직 R2DBC를 지원하지 않기 때문에 JDBC 드라이버를 통해 연결하도록 하기 위한 설정
    user: ${spring.r2dbc.username}
    password: ${spring.r2dbc.password}
    url: jdbc:postgresql://localhost:5432/polardb_order
  cloud:
    config:
      uri: http://localhost:8888
      request-connect-timeout: 5000     # 설정 서버에 연결될 때까지 기다리는 시간(밀리초)
      request-read-timeout: 5000        # 설정 서버에서 설정 데이터를 읽을 때까지 기다리는 시간(밀리초)
      fail-fast: false                  # 설정 서버 연결 실패를 치명적 오류로 인식 -> retry 작동 활성화를 위한 조건
                                        # production 에서는 해당 값을 true 로 설정
      retry:
        max-attempts: 6                 # 시도의 최대 횟수
        initial-interval: 1000          # 최초 재시도 지연 시간(밀리초)
        max-interval: 2000              # 재시도 지연 최대 시간(밀리초)
        multiplier: 1.1                 # 지연 시간 계산 승수
    function:
      definition: dispatchOrder
    stream:
      bindings:
        dispatchOrder-in-0:
          destination: order-dispatched
          group: ${spring.application.name}
        acceptOrder-out-0:
          destination: order-accepted
      rabbit:                           # 스프링 클라우드 스트림 바인딩에 대한 rabbitmq 설정
        bindings:
          acceptOrder-out-0:
            producer:
              transacted: true          # acceptOrder-out-0 바인딩에 대한 트랜잭션 지원 활성화
  rabbitmq:
    host: localhost
    port: 5672
    username: user
    password: password
    connection-timeout: 5s
  security:
    oauth2:
      resourceserver:
        jwt: # OAuth2 는 액세스토큰에 대한 데이터 형식을 강제로 규정하지 않기 때문에 어떤 형식을 사용할지 명시적으로 지정해야 한다.
          issuer-uri: http://localhost:8080/realms/PolarBookshop   # 특정 영역에 대한 모든 관련 OAuth2 엔드포인트 정보를 제공하는 키클록 URL

polar:
  catalog-service-uri: "http://localhost:9001"

management:
  endpoints:
    web:
      exposure:
        include: health
  endpoint:
    health:
      show-details: always       # 애플리케이션의 상세한 상태 정보
      show-components: always   # 애플리케이션이 사용하는 구성 요소에 대한 정보
      probes:
        enabled: true